// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/grpc/aliyun.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AliyunClient is the client API for Aliyun service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AliyunClient interface {
	SendMessage(ctx context.Context, in *AliyunSendMessageRequest, opts ...grpc.CallOption) (*AliyunSendMessageResponse, error)
}

type aliyunClient struct {
	cc grpc.ClientConnInterface
}

func NewAliyunClient(cc grpc.ClientConnInterface) AliyunClient {
	return &aliyunClient{cc}
}

func (c *aliyunClient) SendMessage(ctx context.Context, in *AliyunSendMessageRequest, opts ...grpc.CallOption) (*AliyunSendMessageResponse, error) {
	out := new(AliyunSendMessageResponse)
	err := c.cc.Invoke(ctx, "/api.Aliyun/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AliyunServer is the server API for Aliyun service.
// All implementations must embed UnimplementedAliyunServer
// for forward compatibility
type AliyunServer interface {
	SendMessage(context.Context, *AliyunSendMessageRequest) (*AliyunSendMessageResponse, error)
	mustEmbedUnimplementedAliyunServer()
}

// UnimplementedAliyunServer must be embedded to have forward compatible implementations.
type UnimplementedAliyunServer struct {
}

func (UnimplementedAliyunServer) SendMessage(context.Context, *AliyunSendMessageRequest) (*AliyunSendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedAliyunServer) mustEmbedUnimplementedAliyunServer() {}

// UnsafeAliyunServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AliyunServer will
// result in compilation errors.
type UnsafeAliyunServer interface {
	mustEmbedUnimplementedAliyunServer()
}

func RegisterAliyunServer(s grpc.ServiceRegistrar, srv AliyunServer) {
	s.RegisterService(&Aliyun_ServiceDesc, srv)
}

func _Aliyun_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliyunSendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliyunServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Aliyun/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliyunServer).SendMessage(ctx, req.(*AliyunSendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aliyun_ServiceDesc is the grpc.ServiceDesc for Aliyun service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aliyun_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Aliyun",
	HandlerType: (*AliyunServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Aliyun_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/aliyun.proto",
}
